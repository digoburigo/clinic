//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Post {
  id             String        @id() @default(nanoid())
  title          String
  slug           String
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  ownerId        String
  owner          User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@map("post")
}

model User {
  id            String        @id() @default(nanoid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  posts         Post[]
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  patientsOwner Patient[]     @relation("patientsOwner")
  patientUser   Patient[]     @relation("patientUser")
  appointments  Appointment[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id() @default(nanoid())
  expiresAt            DateTime
  token                String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt()
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id() @default(nanoid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt()

  @@map("account")
}

model Verification {
  id         String   @id() @default(nanoid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@map("verification")
}

model Organization {
  id                          String                       @id() @default(nanoid())
  name                        String
  slug                        String?
  logo                        String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt()
  metadata                    String?
  defaultObjectiveInformation DefaultObjectiveInformation?
  members                     Member[]
  invitations                 Invitation[]
  posts                       Post[]
  patients                    Patient[]
  appointments                Appointment[]
  appointmentCids             AppointmentCid[]
  vaccinations                Vaccinations[]
  allergies                   Allergies[]
  medications                 Medications[]
  examResults                 ExamResults[]
  comorbidities               Comorbidities[]
  surgeries                   Surgeries[]
  healthPlans                 HealthPlans[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id() @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()

  @@map("member")
}

model Invitation {
  id             String       @id() @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Cid {
  id             String           @id() @default(nanoid())
  code           String
  description    String
  appointmentCid AppointmentCid[]

  @@unique([code])
  @@index([code])
  @@map("cid")
}

model AppointmentCid {
  id             String        @id() @default(nanoid())
  appointmentId  String
  appointment    Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  cidId          String
  cid            Cid           @relation(fields: [cidId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, cidId])
  @@map("appointment_cid")
}

model Appointment {
  id             String           @id() @default(nanoid())
  patientId      String
  patient        Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt()
  motive         String
  subjective     String
  objective      String
  evaluation     String
  plan           String
  cids           AppointmentCid[]
  allergies      Allergies[]
  medications    Medications[]
  comorbidities  Comorbidities[]
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

model Patient {
  id                String          @id() @default(nanoid())
  name              String
  cpf               String
  cellphone         String
  email             String
  sex               String
  responsible       String?
  nationality       String
  race              String
  state             String
  city              String
  zipcode           String
  neighborhood      String
  street            String
  number            String
  complement        String?
  occupation        String
  sexualOrientation String?
  civilStatus       String
  bloodType         String
  genderIdentity    String
  password          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt()
  ownerId           String
  owner             User            @relation("patientsOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  organizationId    String?
  organization      Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId            String?
  user              User?           @relation("patientUser", fields: [userId], references: [id], onDelete: Cascade)
  appointments      Appointment[]
  vaccinations      Vaccinations[]
  allergies         Allergies[]
  medications       Medications[]
  examResults       ExamResults[]
  comorbidities     Comorbidities[]
  surgeries         Surgeries[]
  healthPlans       HealthPlans[]

  @@unique([userId, organizationId])
  @@map("patient")
}

model Vaccinations {
  id                   String             @id() @default(nanoid())
  createdAt            DateTime           @default(now())
  patientId            String
  patient              Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  vaccinationsValuesId String
  vaccinationsValues   VaccinationsValues @relation(fields: [vaccinationsValuesId], references: [id], onDelete: Cascade)
  organizationId       String?
  organization         Organization?      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("vaccinations")
}

model VaccinationsValues {
  id           String         @id() @default(nanoid())
  value        String         @unique()
  createdAt    DateTime       @default(now())
  vaccinations Vaccinations[]

  @@map("vaccinations_values")
}

model Allergies {
  id                String          @id() @default(nanoid())
  createdAt         DateTime        @default(now())
  patientId         String?
  patient           Patient?        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  allergiesValuesId String
  allergiesValues   AllergiesValues @relation(fields: [allergiesValuesId], references: [id], onDelete: Cascade)
  appointmentId     String?
  appointment       Appointment?    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  organizationId    String?
  organization      Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("allergies")
}

model AllergiesValues {
  id        String      @id() @default(nanoid())
  value     String      @unique()
  createdAt DateTime    @default(now())
  allergies Allergies[]

  @@map("allergies_values")
}

model Medications {
  id                  String            @id() @default(nanoid())
  createdAt           DateTime          @default(now())
  patientId           String?
  patient             Patient?          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicationsValuesId String
  medicationsValues   MedicationsValues @relation(fields: [medicationsValuesId], references: [id], onDelete: Cascade)
  appointmentId       String?
  appointment         Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  organizationId      String?
  organization        Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("medications")
}

model MedicationsValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  medications Medications[]

  @@map("medications_values")
}

model ExamResults {
  id                  String            @id() @default(nanoid())
  createdAt           DateTime          @default(now())
  patientId           String
  patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  examResultsValuesId String
  examResultsValues   ExamResultsValues @relation(fields: [examResultsValuesId], references: [id], onDelete: Cascade)
  result              String?
  date                DateTime?
  organizationId      String?
  organization        Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("exam_results")
}

model ExamResultsValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  examResults ExamResults[]

  @@map("exam_results_values")
}

model Comorbidities {
  id                    String              @id() @default(nanoid())
  createdAt             DateTime            @default(now())
  patientId             String?
  patient               Patient?            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  comorbiditiesValuesId String
  comorbiditiesValues   ComorbiditiesValues @relation(fields: [comorbiditiesValuesId], references: [id], onDelete: Cascade)
  appointmentId         String?
  appointment           Appointment?        @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  organizationId        String?
  organization          Organization?       @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("comorbidities")
}

model ComorbiditiesValues {
  id            String          @id() @default(nanoid())
  value         String          @unique()
  createdAt     DateTime        @default(now())
  comorbidities Comorbidities[]

  @@map("comorbidities_values")
}

model Surgeries {
  id                String          @id() @default(nanoid())
  createdAt         DateTime        @default(now())
  patientId         String
  patient           Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  surgeriesValuesId String
  surgeriesValues   SurgeriesValues @relation(fields: [surgeriesValuesId], references: [id], onDelete: Cascade)
  organizationId    String?
  organization      Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("surgeries")
}

model SurgeriesValues {
  id        String      @id() @default(nanoid())
  value     String      @unique()
  createdAt DateTime    @default(now())
  surgeries Surgeries[]

  @@map("surgeries_values")
}

model HealthPlans {
  id                  String            @id() @default(nanoid())
  createdAt           DateTime          @default(now())
  patientId           String
  patient             Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  healthPlansValuesId String
  healthPlansValues   HealthPlansValues @relation(fields: [healthPlansValuesId], references: [id], onDelete: Cascade)
  organizationId      String?
  organization        Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("health_plans")
}

model HealthPlansValues {
  id          String        @id() @default(nanoid())
  value       String        @unique()
  createdAt   DateTime      @default(now())
  healthPlans HealthPlans[]

  @@map("health_plans_values")
}

model DefaultObjectiveInformation {
  id             String        @id() @default(nanoid())
  text           String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId])
  @@map("default_objective_information")
}
