// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

plugin zod {
  provider = '@core/zod'
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = 'src/server/api/generated-routers'
    version = 'v11'
    importCreateRouter = "../../trpc"
    importProcedure = "../../trpc"
}

/// Shape of the `auth()` function
type Auth {
  userId           String  @id
  organizationId   String?
  organizationRole String?

  @@auth
}

// EXAMPLE OF A BUSINESS RULE
model Post {
  id        String      @id @default(nanoid())
  title     String
  slug      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String @default(auth().userId) @allow('update', false)
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String? @default(auth().organizationId) @allow('update', false)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([slug])

  // deny anonymous users
  @@deny('all', auth() == null)

  // deny access to posts that don't belong to the user's active organization
  @@deny('all', auth().organizationId != organizationId)

 // users can create posts for themselves
  @@allow('create', auth().userId == ownerId)

  // full access to: post owner, org owner, and org admins
  @@allow('all', auth().userId == ownerId || auth().organizationRole == 'owner' || auth().organizationRole == 'admin')

  // if the post belongs to an org, it's readable to all members
  @@allow('read', organizationId != null)

  @@map("post")
}

model User {
  id            String       @id @default(nanoid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessions      Session[]
  accounts      Account[]
  members       Member[]
  invitations   Invitation[]
  posts         Post[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  patientsOwner Patient[] @relation("patientsOwner")
  patientUser Patient[] @relation("patientUser")

  appointments Appointment[]

  @@allow('create,read', true)
  
  // only the user can update or delete their own profile
  @@allow('update,delete', auth().userId == id)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(nanoid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(nanoid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String? @omit
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(nanoid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id @default(nanoid())
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  metadata    String?

  members     Member[]
  invitations Invitation[]

  posts Post[]
  patients Patient[]

  appointments Appointment[]
  appointmentCids AppointmentCid[]
  vaccinations Vaccinations[]
  allergies Allergies[]
  medications Medications[]
  examResults ExamResults[]
  comorbidities Comorbidities[]
  surgeries Surgeries[]
  healthPlans HealthPlans[]


  @@unique([slug])

  @@allow('create,read', true)

  @@map("organization")
}

model Member {
  id             String       @id @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // deny anonymous users
  @@deny('all', auth() == null)

  // deny access to members that don't belong to the user's active organization
  @@deny('all', auth().organizationId != organizationId)

  // allow read access to members that belong to the user's active organization
  @@allow('read', auth().organizationId == organizationId)

  @@map("member")
}

model Invitation {
  id             String       @id @default(nanoid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")

  // allow read access to invitations that belong to the user's active organization and the user is the inviter
  @@allow('read', auth().userId == inviterId && auth().organizationId == organizationId)
}

// --------------------- BUSINESS RULES ---------------------

model Cid {
  id        String      @id @default(nanoid())
  code       String
  description       String

  appointmentCid AppointmentCid[]

  @@unique([code])

  @@index([code])

  @@allow('read,create,delete', true)

  @@map("cid")
}

model AppointmentCid {
  id String @id @default(nanoid())

  appointmentId String
  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  cidId String
  cid Cid @relation(fields: [cidId], references: [id], onDelete: Cascade)

  organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Access rules
  @@deny('all', auth() == null)
  @@deny('all', auth().organizationId != organizationId)
  @@allow('create', auth().userId == appointment.ownerId)
  @@allow('all', auth().userId == appointment.ownerId || auth().organizationRole == 'owner' || auth().organizationRole == 'admin')
  @@allow('read', organizationId != null)

  @@unique([appointmentId, cidId])

  @@map("appointment_cid")
}


model Appointment {
  id String @id @default(nanoid())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  motive String
  subjective String
  objective String
  evaluation String
  plan String

  cids AppointmentCid[]
  allergies Allergies[]
  medications Medications[]
  comorbidities Comorbidities[]

  ownerId String @default(auth().userId) @allow('update', false)
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Access rules
  @@deny('all', auth() == null)
  @@deny('all', auth().organizationId != organizationId)
  @@allow('create', auth().userId == ownerId)
  @@allow('all', auth().userId == ownerId || auth().organizationRole == 'owner' || auth().organizationRole == 'admin')
  @@allow('read', organizationId != null)

  @@map("appointment")
}

model Patient {
  id String @id @default(nanoid())
  
  // First Form Fields
  name String
  cpf String
  cellphone String
  email String
  sex String
  responsible String?
  nationality String
  race String
  
  // Second Form Fields
  state String
  city String
  zipcode String
  neighborhood String
  street String
  number String
  complement String?
  
  // Third Form Fields
  occupation String
  sexualOrientation String?
  civilStatus String
  bloodType String
  genderIdentity String

  password String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Organization relationship fields
  ownerId String @default(auth().userId) @allow('update', false)
  owner User @relation("patientsOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // user is patient of some clinic
  userId String?
  user User? @relation("patientUser", fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]

  vaccinations Vaccinations[]
  allergies Allergies[]
  medications Medications[]
  examResults ExamResults[]
  comorbidities Comorbidities[]
  surgeries Surgeries[]
  healthPlans HealthPlans[]
  
  // Access rules
  @@deny('all', auth() == null)
  @@deny('all', auth().organizationId != organizationId)
  @@allow('create', auth().userId == ownerId)
  @@allow('all', auth().userId == ownerId || auth().organizationRole == 'owner' || auth().organizationRole == 'admin')
  @@allow('read', organizationId != null)

  // unique constraint to prevent duplicate patients of same user from being created
  @@unique([userId, organizationId])

  @@map("patient")
}

model Vaccinations {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  vaccinationsValuesId String
  vaccinationsValues VaccinationsValues @relation(fields: [vaccinationsValuesId], references: [id], onDelete: Cascade)

  organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, vaccinationsValuesId])

  @@map("vaccinations")
}

model VaccinationsValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  vaccinations Vaccinations[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("vaccinations_values")
}

model Allergies {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)

  allergiesValuesId String
  allergiesValues AllergiesValues @relation(fields: [allergiesValuesId], references: [id], onDelete: Cascade)

  appointmentId String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, allergiesValuesId])

  @@map("allergies")
}


model AllergiesValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  allergies Allergies[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)
  
  @@map("allergies_values")
}

model Medications {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  medicationsValuesId String
  medicationsValues MedicationsValues @relation(fields: [medicationsValuesId], references: [id], onDelete: Cascade)

  appointmentId String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, medicationsValuesId])

  @@map("medications")
}

model MedicationsValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  medications Medications[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("medications_values")
}

model ExamResults {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  examResultsValuesId String
  examResultsValues ExamResultsValues @relation(fields: [examResultsValuesId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, examResultsValuesId])

  @@map("exam_results")
}   

model ExamResultsValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  examResults ExamResults[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("exam_results_values")
}

model Comorbidities {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String?
  patient Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  comorbiditiesValuesId String
  comorbiditiesValues ComorbiditiesValues @relation(fields: [comorbiditiesValuesId], references: [id], onDelete: Cascade)

  appointmentId String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, comorbiditiesValuesId])

  @@map("comorbidities")
}

model ComorbiditiesValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  comorbidities Comorbidities[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("comorbidities_values")
}

model Surgeries {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  surgeriesValuesId String
  surgeriesValues SurgeriesValues @relation(fields: [surgeriesValuesId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, surgeriesValuesId])

  @@map("surgeries")
}

model SurgeriesValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  surgeries Surgeries[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("surgeries_values")
}

model HealthPlans {
  id String @id @default(nanoid())
  createdAt   DateTime @default(now())

  patientId String
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  healthPlansValuesId String
  healthPlansValues HealthPlansValues @relation(fields: [healthPlansValuesId], references: [id], onDelete: Cascade)

    organizationId String? @default(auth().organizationId) @allow('update', false)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@unique([patientId, healthPlansValuesId])

  @@map("health_plans")
}

model HealthPlansValues {
  id String @id @default(nanoid())
  value String @unique
  createdAt   DateTime @default(now())

  healthPlans HealthPlans[]

  // deny anonymous users
  @@deny('all', auth() == null)

  // allow read and create access to all users
  @@allow('create,read,update,delete', true)

  @@map("health_plans_values")
}

